#已知n和phi，分解得到p,q（n的因数可能不止一个）
from math import gcd
from math import isqrt
from random import randrange
from sage.all import inverse_mod,is_prime
from sympy import nextprime
from Crypto.Util.number import *
from math import prod
# primes = [getPrime(512) for _ in range(9)]
# print(f"{prod(primes) = }")
# print(f"{prod(p - 1 for p in primes) = }")
# primes2 = [nextprime(p) for p in choices(primes, k=3)]
# n = prod(primes2)
# e = 65537
# c = pow(int.from_bytes(flag, 'big'), e, n)
# print(f'n = {n}')
# print(f'e = {e}')
# print(f'c = {c}')
n
phi
n = 899081756851564072995842371038848265712822308942406479625157544735473115850983700580364485532298999127834142923262920189902691972009898741820291331257478170998867183390650298055916005944577877856728843264502218692432679062445730259562784479410120575777748292393321588239071577384218317338474855507210816917917699500763270490789679076190405915250953860114858086078092945282693720016414837231157788381144668395364877545151382171251673050910143023561541226464220441
e = 65537
c = 841335863342518623856757469220437045493934999201203757845757404101093751603513457430254875658199946020695655428637035628085973393246970440054477600379027466651143466332405520374224855994531411584946074861018245519106776529260649700756908093025092104292223745612991818151040610497258923925952531383407297026038305824754456660932812929344928080812670596607694776017112795053283695891798940700646874515366341575417161087304105309794441077774052357656529143940010140
def factorize_multi_prime(N, phi):
    prime_factors = set()
    factors = [N]
    while len(factors) > 0:
        N = factors[0]
        w = randrange(2, N - 1)
        i = 1
        while phi % (2 ** i) == 0:
            sqrt_1 = pow(w, phi // (2 ** i), N)
            if sqrt_1 > 1 and sqrt_1 != N - 1:
                factors = factors[1:]
                p = gcd(N, sqrt_1 + 1)
                q = N // p
                if is_prime(p):
                    prime_factors.add(p)
                elif p > 1:
                    factors.append(p)
                if is_prime(q):
                    prime_factors.add(q)
                elif q > 1:
                    factors.append(q)
                break

            i += 1
    return tuple(prime_factors)
result=factorize_multi_prime(n1, phi)
for i in range(9):
    for j in range(9):
        for k in range(9):
            x=nextprime(result[i])
            y=nextprime(result[j])
            z=nextprime(result[k])
            if (x*y*z) == n:
                break
        if k<8:
            break
    if j<8:
        break
f=(x-1)*(y-1)*(z-1)
d=inverse_mod(e,f)
m=pow(c,d,n)
print(long_to_bytes(int(m)))
#flag:moectf{you_KNow_how_to_faCtorize_N_right?_9?WPIBung6?WPIBung6?WPIBund6?}
